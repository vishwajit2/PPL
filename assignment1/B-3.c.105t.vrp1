
;; Function main (main, funcdef_no=13, decl_uid=3219, cgraph_uid=13, symbol_order=13) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

b_8 -> { b_2 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_9 -> { a_1 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 2 ( 33%)



Value ranges after VRP:

a_1: [4, 100]
b_2: VARYING
b_3(D): UNDEFINED
b_4: VARYING
a_5: [5, 100]
b_8: [b_2, b_2]
a_9: [4, 99]  EQUIVALENCES: { a_1 } (1 elements)


Simplified relational if (a_1 <= 99)
 into if (a_1 != 100)

Removing basic block 3

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_10 -> { a_1 }
b_11 -> { b_2 }
a_12 -> { a_1 }
b_13 -> { b_2 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 7
Number of blocks to update: 4 ( 57%)


main ()
{
  int b;
  int a;

  <bb 2> [local count: 11059541]:
  goto <bb 6>; [100.00%]

  <bb 3> [local count: 1062682283]:
  # a_12 = PHI <a_1(4), a_10(6)>
  # b_13 = PHI <b_2(4), b_11(6)>
  b_4 = b_13 * 2;
  a_5 = a_12 + 1;

  <bb 4> [local count: 1062682284]:
  # a_1 = PHI <a_5(3)>
  # b_2 = PHI <b_4(3)>
  if (a_1 != 100)
    goto <bb 3>; [98.96%]
  else
    goto <bb 5>; [1.04%]

  <bb 5> [local count: 11059541]:
  # b_8 = PHI <b_2(4)>
  printf ("%d%d", 100, b_8);
  return 0;

  <bb 6> [local count: 11059541]:
  # a_10 = PHI <4(2)>
  # b_11 = PHI <b_3(D)(2)>
  goto <bb 3>; [100.00%]

}


